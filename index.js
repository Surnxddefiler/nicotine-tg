const TelegramBot = require("node-telegram-bot-api");

const token = "6110612220:AAHIuT4MPFWyahCy8FOcTRrHx0USSUAvS4I";

const bot = new TelegramBot(token, { polling: true });

const { MongoClient } = require("mongodb");

const uri =
  "mongodb+srv://Nick:httpstmenicotineproduct@nicotine.qavv7uy.mongodb.net/?retryWrites=true&w=majority";
const client = new MongoClient(uri);
let isClientConnected = false;

const connectToMongoDB = async () => {
  if (!isClientConnected) {
    await client.connect();
    isClientConnected = true;
    console.log("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.");
  }
};

//get users from db
const getUser = async () => {
  await connectToMongoDB();
  const dbName = "test";
  const collectionName = "Users";
  const database = client.db(dbName);
  const collection = database.collection(collectionName);
  const documents = await collection.find({}).toArray();
  return documents;
};

//save user code
const saveUser = async (chatId, username) => {
  try {
    await connectToMongoDB();
    const dbName = "test";
    const collectionName = "Users";
    const database = client.db(dbName);
    const collection = database.collection(collectionName);

    const existingUser = await collection.findOne({ chatId });
    if (!existingUser) {
      await collection.insertOne({ chatId, username });
      console.log(
        `–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chatId ${chatId} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.`
      );
    } else {
      console.log(
        `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chatId ${chatId} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.`
      );
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
  }
};

process.on("SIGINT", async () => {
  if (isClientConnected) {
    await client.close();
    console.log("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB –∑–∞–∫—Ä—ã—Ç–æ.");
    process.exit(0);
  }
});

bot.on("message", async (msg) => {
  if (msg && msg.error && msg.error.code === 403) {
    console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞");
    return; // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
  }

  if (msg.chat.type !== "private") {
    return;
  }

  const chatId = msg.chat.id;
  const username = msg.chat.username;
  const text = msg.text;
  if (
    text === "/start" &&
    (msg.from.id === 951800184 ||
      msg.from.id === 862045681 ||
      msg.from.id === 5078137410)
  ) {
    await bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, ${msg.from.first_name} ! üëã`, {
      reply_markup: {
        keyboard: [
          [
            {
              text: "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑",
              web_app: { url: "https://marvelous-kheer-25e032.netlify.app" },
            },
          ],
          [
            {
              text: "–ê–¥–º–∏–Ω",
              web_app: {
                url: "https://marvelous-kheer-25e032.netlify.app" + "/admin",
              },
            },
          ],
        ],
        resize_keyboard: true,
      },
    });
    await saveUser(chatId, username);
  } else if (text === "/start") {
    await bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, ${msg.from.first_name} ! üëã`, {
      reply_markup: {
        keyboard: [
          [
            {
              text: "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑",
              web_app: { url: "https://marvelous-kheer-25e032.netlify.app" },
            },
          ],
        ],
        resize_keyboard: true,
      },
    });
    await saveUser(chatId, username);
  }
  if (msg.web_app_data) {
    try {
      const data = JSON.parse(msg.web_app_data.data);
      console.log(data);
      await bot.sendMessage(
        chatId,
        `–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω, —Å–∞–ø–ø–æ—Ä—Ç - @nicotineproductsupport  –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è ‚úÖ \n\n–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª - https://t.me/reservenpnp üìñ \n\n–í–∞—à –∑–∞–∫–∞–∑ :\n${
          data.val.phone
        } ${data.novaPoshta ? "" : `\n${data.val.time}`} \n${
          !data.novaPoshta
            ? data.place
            : `–î–æ—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ–π –ø–æ—á—Ç–æ–π \n${data.val.name} \n${data.val.town} \n${data.val.compartment}`
        }  ${data.cart.map((el, i) => {
          if (el.isPod === "–ú–ù–û–ì–û–†–ê–ó–ö–ò") {
            return `\n${el.name} `;
          } else if (el.isPod === "–ö–ê–†–¢–†–ò–î–ñ–ò") {
            return `\n${el.name} ${el.nicotine} `;
          } else {
            return `\n${el.mark} ${el.name} ${el.nicotine} `;
          }
        })}
        \n–°—É–º–º–∞ : ${data.pay} ‚Ç¥ ${
          data.deliv || data.novaPoshta ? "+ –¥–æ—Å—Ç–∞–≤–∫–∞" : ""
        }
        `,
        { disable_web_page_preview: true }
      );

      await bot.sendMessage(
        -623730102,
        `\n${data.novaPoshta ? "–ù–æ–≤–∞—è –ü–æ—á—Ç–∞" : data.val.time} \n${
          data.val.phone
        } \n${
          data.novaPoshta
            ? `${data.val.name} \n${data.val.town} ${data.val.compartment}`
            : data.place
        } \n${
          msg.from.username ? `@${msg.from.username}` : `-`
        } ${data.cart.map((el, i) => {
          if (el.isPod === "–ú–ù–û–ì–û–†–ê–ó–ö–ò") {
            return `\n${el.name} `;
          } else if (el.isPod === "–ö–ê–†–¢–†–ò–î–ñ–ò") {
            return `\n${el.name} ${el.nicotine} `;
          } else {
            return `\n${el.mark} ${el.name} ${el.nicotine} `;
          }
        })}
        \n–°—É–º–º–∞ : ${data.pay} ‚Ç¥ ${
          data.deliv || data.novaPoshta ? "+ –¥–æ—Å—Ç–∞–≤–∫–∞" : ""
        }
        `
      );
      await saveUser(chatId, username);
    } catch {}
  }
});

//message to all code
bot.onText(/\/broadcast((.|\n)+)/, async (msg, match) => {
  if (
    msg.from.id === 951800184 ||
    msg.from.id === 862045681 ||
    msg.from.id === 5078137410
  ) {
    const users = await getUser();
    const message = match[1];
    users.forEach((user) => {
      let chatId = user.chatId;
      bot.sendMessage(chatId, message).catch((err) => {
        console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è ${chatId}:`, err);
      });
    });

    bot.sendMessage(msg.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.");
  }
});
